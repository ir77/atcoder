#[allow(unused_imports)]
use std::cmp::max;
#[allow(unused_imports)]
use std::cmp::min;
#[allow(unused_imports)]
use std::fmt;
#[allow(unused_imports)]
use std::fmt::Debug;
#[allow(unused_imports)]
use std::io;
#[allow(unused_imports)]
use std::str::FromStr;

fn main() {
    let n: u32 = get_vec_input()[0];

    // 2進数でスイッチの全パターンを出す
    let mut patterns = get_binary_string(n);

    // 15人の証言を聞いて patterns を filter していく
    for i in 0..n {
        let a: usize = get_vec_input()[0];
        for _ in 0..a {
            let input = get_vec_input();
            let x: usize = input[0];
            let y: usize = input[1];

            let mut ng_index: Vec<usize> = Vec::new();
            for (j, pattern) in patterns.iter().enumerate() {
                if pattern[i..i + 1] == *"0" {
                    continue;
                }
                if pattern[x - 1..x] != y.to_string() {
                    ng_index.push(j);
                }
            }
            for i in ng_index.iter().rev() {
                patterns.remove(*i);
            }
        }
    }
    let last_pattern = patterns.last().unwrap();
    let answer = last_pattern
        .chars()
        .filter(|&x| x == '1')
        .collect::<Vec<_>>()
        .len();
    println!("{}", answer);
}

#[allow(dead_code)]
fn get_binary_string(max_value: u32) -> Vec<String> {
    (0..2i64.pow(max_value))
        .map(|x| format!("{:0>1$b}", x, max_value as usize))
        .collect::<Vec<String>>()
}

#[allow(dead_code)]
fn check_prime(value: i64) -> bool {
    if value == 2 {
        return true;
    }
    if value % 2 == 0 {
        return false;
    }
    for i in 3..(value as f64).sqrt().floor() as i64 {
        if value % i == 0 {
            return false;
        }
    }
    return true;
}

#[allow(dead_code)]
fn get_digit(value: i64) -> i64 {
    let mut digit = 0i64;
    let mut value = value;
    while value != 0 {
        value /= 10;
        digit += 1;
    }
    digit
}

#[allow(dead_code)]
fn sum_digit2(value: String) -> u32 {
    return value.chars().fold(0u32, |a, b| a + b.to_digit(10).unwrap());
}

#[allow(dead_code)]
fn sum_digit(value: i64) -> i64 {
    if value < 10 {
        return value;
    }
    return sum_digit(value / 10) + value % 10;
}

#[allow(dead_code)]
fn update_max<T>(left: &mut T, right: T)
where
    T: std::cmp::Ord + std::clone::Clone,
{
    if *left < right {
        *left = right.clone();
    }
}

#[allow(dead_code)]
fn update_min<T>(left: &mut T, right: T)
where
    T: std::cmp::Ord + std::clone::Clone,
{
    if *left > right {
        *left = right.clone();
    }
}

#[allow(dead_code)]
fn get_vec_input<T>() -> Vec<T>
where
    T: FromStr,
    T::Err: Debug,
{
    let mut input = String::new();
    io::stdin()
        .read_line(&mut input)
        .expect("Failed to read line");
    let vec: Vec<T> = input
        .split_whitespace()
        .map(|x| x.parse().unwrap())
        .collect();
    vec
}

#[allow(dead_code)]
fn get_tuple_input() -> (u64, f32) {
    let mut s = String::new();
    io::stdin().read_line(&mut s).expect("");
    let mut iter = s.trim().split_whitespace();
    let c: u64 = iter.next().unwrap().parse().unwrap();
    let n: f32 = iter.next().unwrap().parse().unwrap();
    (c, n)
}

#[allow(dead_code)]
fn get_string_input() -> String {
    let mut s = String::new();
    io::stdin().read_line(&mut s).expect("");
    s.trim().to_string()
}
